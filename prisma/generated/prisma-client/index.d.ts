// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  block: (where?: BlockWhereInput) => Promise<boolean>;
  bullet: (where?: BulletWhereInput) => Promise<boolean>;
  resume: (where?: ResumeWhereInput) => Promise<boolean>;
  section: (where?: SectionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  block: (where: BlockWhereUniqueInput) => BlockNullablePromise;
  blocks: (args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Block>;
  blocksConnection: (args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlockConnectionPromise;
  bullet: (where: BulletWhereUniqueInput) => BulletNullablePromise;
  bullets: (args?: {
    where?: BulletWhereInput;
    orderBy?: BulletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bullet>;
  bulletsConnection: (args?: {
    where?: BulletWhereInput;
    orderBy?: BulletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BulletConnectionPromise;
  resume: (where: ResumeWhereUniqueInput) => ResumeNullablePromise;
  resumes: (args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Resume>;
  resumesConnection: (args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResumeConnectionPromise;
  section: (where: SectionWhereUniqueInput) => SectionNullablePromise;
  sections: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Section>;
  sectionsConnection: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SectionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBlock: (data: BlockCreateInput) => BlockPromise;
  updateBlock: (args: {
    data: BlockUpdateInput;
    where: BlockWhereUniqueInput;
  }) => BlockPromise;
  updateManyBlocks: (args: {
    data: BlockUpdateManyMutationInput;
    where?: BlockWhereInput;
  }) => BatchPayloadPromise;
  upsertBlock: (args: {
    where: BlockWhereUniqueInput;
    create: BlockCreateInput;
    update: BlockUpdateInput;
  }) => BlockPromise;
  deleteBlock: (where: BlockWhereUniqueInput) => BlockPromise;
  deleteManyBlocks: (where?: BlockWhereInput) => BatchPayloadPromise;
  createBullet: (data: BulletCreateInput) => BulletPromise;
  updateBullet: (args: {
    data: BulletUpdateInput;
    where: BulletWhereUniqueInput;
  }) => BulletPromise;
  updateManyBullets: (args: {
    data: BulletUpdateManyMutationInput;
    where?: BulletWhereInput;
  }) => BatchPayloadPromise;
  upsertBullet: (args: {
    where: BulletWhereUniqueInput;
    create: BulletCreateInput;
    update: BulletUpdateInput;
  }) => BulletPromise;
  deleteBullet: (where: BulletWhereUniqueInput) => BulletPromise;
  deleteManyBullets: (where?: BulletWhereInput) => BatchPayloadPromise;
  createResume: (data: ResumeCreateInput) => ResumePromise;
  updateResume: (args: {
    data: ResumeUpdateInput;
    where: ResumeWhereUniqueInput;
  }) => ResumePromise;
  updateManyResumes: (args: {
    data: ResumeUpdateManyMutationInput;
    where?: ResumeWhereInput;
  }) => BatchPayloadPromise;
  upsertResume: (args: {
    where: ResumeWhereUniqueInput;
    create: ResumeCreateInput;
    update: ResumeUpdateInput;
  }) => ResumePromise;
  deleteResume: (where: ResumeWhereUniqueInput) => ResumePromise;
  deleteManyResumes: (where?: ResumeWhereInput) => BatchPayloadPromise;
  createSection: (data: SectionCreateInput) => SectionPromise;
  updateSection: (args: {
    data: SectionUpdateInput;
    where: SectionWhereUniqueInput;
  }) => SectionPromise;
  updateManySections: (args: {
    data: SectionUpdateManyMutationInput;
    where?: SectionWhereInput;
  }) => BatchPayloadPromise;
  upsertSection: (args: {
    where: SectionWhereUniqueInput;
    create: SectionCreateInput;
    update: SectionUpdateInput;
  }) => SectionPromise;
  deleteSection: (where: SectionWhereUniqueInput) => SectionPromise;
  deleteManySections: (where?: SectionWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  block: (
    where?: BlockSubscriptionWhereInput
  ) => BlockSubscriptionPayloadSubscription;
  bullet: (
    where?: BulletSubscriptionWhereInput
  ) => BulletSubscriptionPayloadSubscription;
  resume: (
    where?: ResumeSubscriptionWhereInput
  ) => ResumeSubscriptionPayloadSubscription;
  section: (
    where?: SectionSubscriptionWhereInput
  ) => SectionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "order_ASC"
  | "order_DESC";

export type BlockOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title1_ASC"
  | "title1_DESC"
  | "title2_ASC"
  | "title2_DESC"
  | "subtitle1_ASC"
  | "subtitle1_DESC"
  | "subtitle2_ASC"
  | "subtitle2_DESC"
  | "order_ASC"
  | "order_DESC";

export type BulletOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "order_ASC"
  | "order_DESC";

export type ResumeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_ASC"
  | "user_DESC"
  | "title_ASC"
  | "title_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BlockWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  resume?: Maybe<ResumeWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  blocks_every?: Maybe<BlockWhereInput>;
  blocks_some?: Maybe<BlockWhereInput>;
  blocks_none?: Maybe<BlockWhereInput>;
  AND?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  OR?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  NOT?: Maybe<SectionWhereInput[] | SectionWhereInput>;
}

export interface ResumeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<String>;
  user_not?: Maybe<String>;
  user_in?: Maybe<String[] | String>;
  user_not_in?: Maybe<String[] | String>;
  user_lt?: Maybe<String>;
  user_lte?: Maybe<String>;
  user_gt?: Maybe<String>;
  user_gte?: Maybe<String>;
  user_contains?: Maybe<String>;
  user_not_contains?: Maybe<String>;
  user_starts_with?: Maybe<String>;
  user_not_starts_with?: Maybe<String>;
  user_ends_with?: Maybe<String>;
  user_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  sections_every?: Maybe<SectionWhereInput>;
  sections_some?: Maybe<SectionWhereInput>;
  sections_none?: Maybe<SectionWhereInput>;
  AND?: Maybe<ResumeWhereInput[] | ResumeWhereInput>;
  OR?: Maybe<ResumeWhereInput[] | ResumeWhereInput>;
  NOT?: Maybe<ResumeWhereInput[] | ResumeWhereInput>;
}

export interface BlockWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  section?: Maybe<SectionWhereInput>;
  title1?: Maybe<String>;
  title1_not?: Maybe<String>;
  title1_in?: Maybe<String[] | String>;
  title1_not_in?: Maybe<String[] | String>;
  title1_lt?: Maybe<String>;
  title1_lte?: Maybe<String>;
  title1_gt?: Maybe<String>;
  title1_gte?: Maybe<String>;
  title1_contains?: Maybe<String>;
  title1_not_contains?: Maybe<String>;
  title1_starts_with?: Maybe<String>;
  title1_not_starts_with?: Maybe<String>;
  title1_ends_with?: Maybe<String>;
  title1_not_ends_with?: Maybe<String>;
  title2?: Maybe<String>;
  title2_not?: Maybe<String>;
  title2_in?: Maybe<String[] | String>;
  title2_not_in?: Maybe<String[] | String>;
  title2_lt?: Maybe<String>;
  title2_lte?: Maybe<String>;
  title2_gt?: Maybe<String>;
  title2_gte?: Maybe<String>;
  title2_contains?: Maybe<String>;
  title2_not_contains?: Maybe<String>;
  title2_starts_with?: Maybe<String>;
  title2_not_starts_with?: Maybe<String>;
  title2_ends_with?: Maybe<String>;
  title2_not_ends_with?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle1_not?: Maybe<String>;
  subtitle1_in?: Maybe<String[] | String>;
  subtitle1_not_in?: Maybe<String[] | String>;
  subtitle1_lt?: Maybe<String>;
  subtitle1_lte?: Maybe<String>;
  subtitle1_gt?: Maybe<String>;
  subtitle1_gte?: Maybe<String>;
  subtitle1_contains?: Maybe<String>;
  subtitle1_not_contains?: Maybe<String>;
  subtitle1_starts_with?: Maybe<String>;
  subtitle1_not_starts_with?: Maybe<String>;
  subtitle1_ends_with?: Maybe<String>;
  subtitle1_not_ends_with?: Maybe<String>;
  subtitle2?: Maybe<String>;
  subtitle2_not?: Maybe<String>;
  subtitle2_in?: Maybe<String[] | String>;
  subtitle2_not_in?: Maybe<String[] | String>;
  subtitle2_lt?: Maybe<String>;
  subtitle2_lte?: Maybe<String>;
  subtitle2_gt?: Maybe<String>;
  subtitle2_gte?: Maybe<String>;
  subtitle2_contains?: Maybe<String>;
  subtitle2_not_contains?: Maybe<String>;
  subtitle2_starts_with?: Maybe<String>;
  subtitle2_not_starts_with?: Maybe<String>;
  subtitle2_ends_with?: Maybe<String>;
  subtitle2_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  bullets_every?: Maybe<BulletWhereInput>;
  bullets_some?: Maybe<BulletWhereInput>;
  bullets_none?: Maybe<BulletWhereInput>;
  AND?: Maybe<BlockWhereInput[] | BlockWhereInput>;
  OR?: Maybe<BlockWhereInput[] | BlockWhereInput>;
  NOT?: Maybe<BlockWhereInput[] | BlockWhereInput>;
}

export interface BulletWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  block?: Maybe<BlockWhereInput>;
  AND?: Maybe<BulletWhereInput[] | BulletWhereInput>;
  OR?: Maybe<BulletWhereInput[] | BulletWhereInput>;
  NOT?: Maybe<BulletWhereInput[] | BulletWhereInput>;
}

export type BulletWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ResumeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BlockCreateInput {
  id?: Maybe<ID_Input>;
  section: SectionCreateOneWithoutBlocksInput;
  title1: String;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order: Int;
  bullets?: Maybe<BulletCreateManyWithoutBlockInput>;
}

export interface SectionCreateOneWithoutBlocksInput {
  create?: Maybe<SectionCreateWithoutBlocksInput>;
  connect?: Maybe<SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutBlocksInput {
  id?: Maybe<ID_Input>;
  resume: ResumeCreateOneWithoutSectionsInput;
  title: String;
  order: Int;
}

export interface ResumeCreateOneWithoutSectionsInput {
  create?: Maybe<ResumeCreateWithoutSectionsInput>;
  connect?: Maybe<ResumeWhereUniqueInput>;
}

export interface ResumeCreateWithoutSectionsInput {
  id?: Maybe<ID_Input>;
  user: String;
  title: String;
}

export interface BulletCreateManyWithoutBlockInput {
  create?: Maybe<
    BulletCreateWithoutBlockInput[] | BulletCreateWithoutBlockInput
  >;
  connect?: Maybe<BulletWhereUniqueInput[] | BulletWhereUniqueInput>;
}

export interface BulletCreateWithoutBlockInput {
  id?: Maybe<ID_Input>;
  text: String;
  order: Int;
}

export interface BlockUpdateInput {
  section?: Maybe<SectionUpdateOneRequiredWithoutBlocksInput>;
  title1?: Maybe<String>;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order?: Maybe<Int>;
  bullets?: Maybe<BulletUpdateManyWithoutBlockInput>;
}

export interface SectionUpdateOneRequiredWithoutBlocksInput {
  create?: Maybe<SectionCreateWithoutBlocksInput>;
  update?: Maybe<SectionUpdateWithoutBlocksDataInput>;
  upsert?: Maybe<SectionUpsertWithoutBlocksInput>;
  connect?: Maybe<SectionWhereUniqueInput>;
}

export interface SectionUpdateWithoutBlocksDataInput {
  resume?: Maybe<ResumeUpdateOneRequiredWithoutSectionsInput>;
  title?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface ResumeUpdateOneRequiredWithoutSectionsInput {
  create?: Maybe<ResumeCreateWithoutSectionsInput>;
  update?: Maybe<ResumeUpdateWithoutSectionsDataInput>;
  upsert?: Maybe<ResumeUpsertWithoutSectionsInput>;
  connect?: Maybe<ResumeWhereUniqueInput>;
}

export interface ResumeUpdateWithoutSectionsDataInput {
  user?: Maybe<String>;
  title?: Maybe<String>;
}

export interface ResumeUpsertWithoutSectionsInput {
  update: ResumeUpdateWithoutSectionsDataInput;
  create: ResumeCreateWithoutSectionsInput;
}

export interface SectionUpsertWithoutBlocksInput {
  update: SectionUpdateWithoutBlocksDataInput;
  create: SectionCreateWithoutBlocksInput;
}

export interface BulletUpdateManyWithoutBlockInput {
  create?: Maybe<
    BulletCreateWithoutBlockInput[] | BulletCreateWithoutBlockInput
  >;
  delete?: Maybe<BulletWhereUniqueInput[] | BulletWhereUniqueInput>;
  connect?: Maybe<BulletWhereUniqueInput[] | BulletWhereUniqueInput>;
  set?: Maybe<BulletWhereUniqueInput[] | BulletWhereUniqueInput>;
  disconnect?: Maybe<BulletWhereUniqueInput[] | BulletWhereUniqueInput>;
  update?: Maybe<
    | BulletUpdateWithWhereUniqueWithoutBlockInput[]
    | BulletUpdateWithWhereUniqueWithoutBlockInput
  >;
  upsert?: Maybe<
    | BulletUpsertWithWhereUniqueWithoutBlockInput[]
    | BulletUpsertWithWhereUniqueWithoutBlockInput
  >;
  deleteMany?: Maybe<BulletScalarWhereInput[] | BulletScalarWhereInput>;
  updateMany?: Maybe<
    | BulletUpdateManyWithWhereNestedInput[]
    | BulletUpdateManyWithWhereNestedInput
  >;
}

export interface BulletUpdateWithWhereUniqueWithoutBlockInput {
  where: BulletWhereUniqueInput;
  data: BulletUpdateWithoutBlockDataInput;
}

export interface BulletUpdateWithoutBlockDataInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface BulletUpsertWithWhereUniqueWithoutBlockInput {
  where: BulletWhereUniqueInput;
  update: BulletUpdateWithoutBlockDataInput;
  create: BulletCreateWithoutBlockInput;
}

export interface BulletScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<BulletScalarWhereInput[] | BulletScalarWhereInput>;
  OR?: Maybe<BulletScalarWhereInput[] | BulletScalarWhereInput>;
  NOT?: Maybe<BulletScalarWhereInput[] | BulletScalarWhereInput>;
}

export interface BulletUpdateManyWithWhereNestedInput {
  where: BulletScalarWhereInput;
  data: BulletUpdateManyDataInput;
}

export interface BulletUpdateManyDataInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface BlockUpdateManyMutationInput {
  title1?: Maybe<String>;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface BulletCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  order: Int;
  block: BlockCreateOneWithoutBulletsInput;
}

export interface BlockCreateOneWithoutBulletsInput {
  create?: Maybe<BlockCreateWithoutBulletsInput>;
  connect?: Maybe<BlockWhereUniqueInput>;
}

export interface BlockCreateWithoutBulletsInput {
  id?: Maybe<ID_Input>;
  section: SectionCreateOneWithoutBlocksInput;
  title1: String;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order: Int;
}

export interface BulletUpdateInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
  block?: Maybe<BlockUpdateOneRequiredWithoutBulletsInput>;
}

export interface BlockUpdateOneRequiredWithoutBulletsInput {
  create?: Maybe<BlockCreateWithoutBulletsInput>;
  update?: Maybe<BlockUpdateWithoutBulletsDataInput>;
  upsert?: Maybe<BlockUpsertWithoutBulletsInput>;
  connect?: Maybe<BlockWhereUniqueInput>;
}

export interface BlockUpdateWithoutBulletsDataInput {
  section?: Maybe<SectionUpdateOneRequiredWithoutBlocksInput>;
  title1?: Maybe<String>;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface BlockUpsertWithoutBulletsInput {
  update: BlockUpdateWithoutBulletsDataInput;
  create: BlockCreateWithoutBulletsInput;
}

export interface BulletUpdateManyMutationInput {
  text?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface ResumeCreateInput {
  id?: Maybe<ID_Input>;
  user: String;
  title: String;
  sections?: Maybe<SectionCreateManyWithoutResumeInput>;
}

export interface SectionCreateManyWithoutResumeInput {
  create?: Maybe<
    SectionCreateWithoutResumeInput[] | SectionCreateWithoutResumeInput
  >;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutResumeInput {
  id?: Maybe<ID_Input>;
  title: String;
  order: Int;
  blocks?: Maybe<BlockCreateManyWithoutSectionInput>;
}

export interface BlockCreateManyWithoutSectionInput {
  create?: Maybe<
    BlockCreateWithoutSectionInput[] | BlockCreateWithoutSectionInput
  >;
  connect?: Maybe<BlockWhereUniqueInput[] | BlockWhereUniqueInput>;
}

export interface BlockCreateWithoutSectionInput {
  id?: Maybe<ID_Input>;
  title1: String;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order: Int;
  bullets?: Maybe<BulletCreateManyWithoutBlockInput>;
}

export interface ResumeUpdateInput {
  user?: Maybe<String>;
  title?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutResumeInput>;
}

export interface SectionUpdateManyWithoutResumeInput {
  create?: Maybe<
    SectionCreateWithoutResumeInput[] | SectionCreateWithoutResumeInput
  >;
  delete?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  set?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  disconnect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  update?: Maybe<
    | SectionUpdateWithWhereUniqueWithoutResumeInput[]
    | SectionUpdateWithWhereUniqueWithoutResumeInput
  >;
  upsert?: Maybe<
    | SectionUpsertWithWhereUniqueWithoutResumeInput[]
    | SectionUpsertWithWhereUniqueWithoutResumeInput
  >;
  deleteMany?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  updateMany?: Maybe<
    | SectionUpdateManyWithWhereNestedInput[]
    | SectionUpdateManyWithWhereNestedInput
  >;
}

export interface SectionUpdateWithWhereUniqueWithoutResumeInput {
  where: SectionWhereUniqueInput;
  data: SectionUpdateWithoutResumeDataInput;
}

export interface SectionUpdateWithoutResumeDataInput {
  title?: Maybe<String>;
  order?: Maybe<Int>;
  blocks?: Maybe<BlockUpdateManyWithoutSectionInput>;
}

export interface BlockUpdateManyWithoutSectionInput {
  create?: Maybe<
    BlockCreateWithoutSectionInput[] | BlockCreateWithoutSectionInput
  >;
  delete?: Maybe<BlockWhereUniqueInput[] | BlockWhereUniqueInput>;
  connect?: Maybe<BlockWhereUniqueInput[] | BlockWhereUniqueInput>;
  set?: Maybe<BlockWhereUniqueInput[] | BlockWhereUniqueInput>;
  disconnect?: Maybe<BlockWhereUniqueInput[] | BlockWhereUniqueInput>;
  update?: Maybe<
    | BlockUpdateWithWhereUniqueWithoutSectionInput[]
    | BlockUpdateWithWhereUniqueWithoutSectionInput
  >;
  upsert?: Maybe<
    | BlockUpsertWithWhereUniqueWithoutSectionInput[]
    | BlockUpsertWithWhereUniqueWithoutSectionInput
  >;
  deleteMany?: Maybe<BlockScalarWhereInput[] | BlockScalarWhereInput>;
  updateMany?: Maybe<
    BlockUpdateManyWithWhereNestedInput[] | BlockUpdateManyWithWhereNestedInput
  >;
}

export interface BlockUpdateWithWhereUniqueWithoutSectionInput {
  where: BlockWhereUniqueInput;
  data: BlockUpdateWithoutSectionDataInput;
}

export interface BlockUpdateWithoutSectionDataInput {
  title1?: Maybe<String>;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order?: Maybe<Int>;
  bullets?: Maybe<BulletUpdateManyWithoutBlockInput>;
}

export interface BlockUpsertWithWhereUniqueWithoutSectionInput {
  where: BlockWhereUniqueInput;
  update: BlockUpdateWithoutSectionDataInput;
  create: BlockCreateWithoutSectionInput;
}

export interface BlockScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title1?: Maybe<String>;
  title1_not?: Maybe<String>;
  title1_in?: Maybe<String[] | String>;
  title1_not_in?: Maybe<String[] | String>;
  title1_lt?: Maybe<String>;
  title1_lte?: Maybe<String>;
  title1_gt?: Maybe<String>;
  title1_gte?: Maybe<String>;
  title1_contains?: Maybe<String>;
  title1_not_contains?: Maybe<String>;
  title1_starts_with?: Maybe<String>;
  title1_not_starts_with?: Maybe<String>;
  title1_ends_with?: Maybe<String>;
  title1_not_ends_with?: Maybe<String>;
  title2?: Maybe<String>;
  title2_not?: Maybe<String>;
  title2_in?: Maybe<String[] | String>;
  title2_not_in?: Maybe<String[] | String>;
  title2_lt?: Maybe<String>;
  title2_lte?: Maybe<String>;
  title2_gt?: Maybe<String>;
  title2_gte?: Maybe<String>;
  title2_contains?: Maybe<String>;
  title2_not_contains?: Maybe<String>;
  title2_starts_with?: Maybe<String>;
  title2_not_starts_with?: Maybe<String>;
  title2_ends_with?: Maybe<String>;
  title2_not_ends_with?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle1_not?: Maybe<String>;
  subtitle1_in?: Maybe<String[] | String>;
  subtitle1_not_in?: Maybe<String[] | String>;
  subtitle1_lt?: Maybe<String>;
  subtitle1_lte?: Maybe<String>;
  subtitle1_gt?: Maybe<String>;
  subtitle1_gte?: Maybe<String>;
  subtitle1_contains?: Maybe<String>;
  subtitle1_not_contains?: Maybe<String>;
  subtitle1_starts_with?: Maybe<String>;
  subtitle1_not_starts_with?: Maybe<String>;
  subtitle1_ends_with?: Maybe<String>;
  subtitle1_not_ends_with?: Maybe<String>;
  subtitle2?: Maybe<String>;
  subtitle2_not?: Maybe<String>;
  subtitle2_in?: Maybe<String[] | String>;
  subtitle2_not_in?: Maybe<String[] | String>;
  subtitle2_lt?: Maybe<String>;
  subtitle2_lte?: Maybe<String>;
  subtitle2_gt?: Maybe<String>;
  subtitle2_gte?: Maybe<String>;
  subtitle2_contains?: Maybe<String>;
  subtitle2_not_contains?: Maybe<String>;
  subtitle2_starts_with?: Maybe<String>;
  subtitle2_not_starts_with?: Maybe<String>;
  subtitle2_ends_with?: Maybe<String>;
  subtitle2_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<BlockScalarWhereInput[] | BlockScalarWhereInput>;
  OR?: Maybe<BlockScalarWhereInput[] | BlockScalarWhereInput>;
  NOT?: Maybe<BlockScalarWhereInput[] | BlockScalarWhereInput>;
}

export interface BlockUpdateManyWithWhereNestedInput {
  where: BlockScalarWhereInput;
  data: BlockUpdateManyDataInput;
}

export interface BlockUpdateManyDataInput {
  title1?: Maybe<String>;
  title2?: Maybe<String>;
  subtitle1?: Maybe<String>;
  subtitle2?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface SectionUpsertWithWhereUniqueWithoutResumeInput {
  where: SectionWhereUniqueInput;
  update: SectionUpdateWithoutResumeDataInput;
  create: SectionCreateWithoutResumeInput;
}

export interface SectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  OR?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  NOT?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
}

export interface SectionUpdateManyWithWhereNestedInput {
  where: SectionScalarWhereInput;
  data: SectionUpdateManyDataInput;
}

export interface SectionUpdateManyDataInput {
  title?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface ResumeUpdateManyMutationInput {
  user?: Maybe<String>;
  title?: Maybe<String>;
}

export interface SectionCreateInput {
  id?: Maybe<ID_Input>;
  resume: ResumeCreateOneWithoutSectionsInput;
  title: String;
  order: Int;
  blocks?: Maybe<BlockCreateManyWithoutSectionInput>;
}

export interface SectionUpdateInput {
  resume?: Maybe<ResumeUpdateOneRequiredWithoutSectionsInput>;
  title?: Maybe<String>;
  order?: Maybe<Int>;
  blocks?: Maybe<BlockUpdateManyWithoutSectionInput>;
}

export interface SectionUpdateManyMutationInput {
  title?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface BlockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlockWhereInput>;
  AND?: Maybe<BlockSubscriptionWhereInput[] | BlockSubscriptionWhereInput>;
  OR?: Maybe<BlockSubscriptionWhereInput[] | BlockSubscriptionWhereInput>;
  NOT?: Maybe<BlockSubscriptionWhereInput[] | BlockSubscriptionWhereInput>;
}

export interface BulletSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BulletWhereInput>;
  AND?: Maybe<BulletSubscriptionWhereInput[] | BulletSubscriptionWhereInput>;
  OR?: Maybe<BulletSubscriptionWhereInput[] | BulletSubscriptionWhereInput>;
  NOT?: Maybe<BulletSubscriptionWhereInput[] | BulletSubscriptionWhereInput>;
}

export interface ResumeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResumeWhereInput>;
  AND?: Maybe<ResumeSubscriptionWhereInput[] | ResumeSubscriptionWhereInput>;
  OR?: Maybe<ResumeSubscriptionWhereInput[] | ResumeSubscriptionWhereInput>;
  NOT?: Maybe<ResumeSubscriptionWhereInput[] | ResumeSubscriptionWhereInput>;
}

export interface SectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SectionWhereInput>;
  AND?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  OR?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  NOT?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Block {
  id: ID_Output;
  title1: String;
  title2?: String;
  subtitle1?: String;
  subtitle2?: String;
  order: Int;
}

export interface BlockPromise extends Promise<Block>, Fragmentable {
  id: () => Promise<ID_Output>;
  section: <T = SectionPromise>() => T;
  title1: () => Promise<String>;
  title2: () => Promise<String>;
  subtitle1: () => Promise<String>;
  subtitle2: () => Promise<String>;
  order: () => Promise<Int>;
  bullets: <T = FragmentableArray<Bullet>>(args?: {
    where?: BulletWhereInput;
    orderBy?: BulletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BlockSubscription
  extends Promise<AsyncIterator<Block>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  section: <T = SectionSubscription>() => T;
  title1: () => Promise<AsyncIterator<String>>;
  title2: () => Promise<AsyncIterator<String>>;
  subtitle1: () => Promise<AsyncIterator<String>>;
  subtitle2: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  bullets: <T = Promise<AsyncIterator<BulletSubscription>>>(args?: {
    where?: BulletWhereInput;
    orderBy?: BulletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BlockNullablePromise
  extends Promise<Block | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  section: <T = SectionPromise>() => T;
  title1: () => Promise<String>;
  title2: () => Promise<String>;
  subtitle1: () => Promise<String>;
  subtitle2: () => Promise<String>;
  order: () => Promise<Int>;
  bullets: <T = FragmentableArray<Bullet>>(args?: {
    where?: BulletWhereInput;
    orderBy?: BulletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Section {
  id: ID_Output;
  title: String;
  order: Int;
}

export interface SectionPromise extends Promise<Section>, Fragmentable {
  id: () => Promise<ID_Output>;
  resume: <T = ResumePromise>() => T;
  title: () => Promise<String>;
  order: () => Promise<Int>;
  blocks: <T = FragmentableArray<Block>>(args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SectionSubscription
  extends Promise<AsyncIterator<Section>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resume: <T = ResumeSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  blocks: <T = Promise<AsyncIterator<BlockSubscription>>>(args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SectionNullablePromise
  extends Promise<Section | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resume: <T = ResumePromise>() => T;
  title: () => Promise<String>;
  order: () => Promise<Int>;
  blocks: <T = FragmentableArray<Block>>(args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Resume {
  id: ID_Output;
  user: String;
  title: String;
}

export interface ResumePromise extends Promise<Resume>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: () => Promise<String>;
  title: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResumeSubscription
  extends Promise<AsyncIterator<Resume>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  sections: <T = Promise<AsyncIterator<SectionSubscription>>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResumeNullablePromise
  extends Promise<Resume | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: () => Promise<String>;
  title: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Bullet {
  id: ID_Output;
  text: String;
  order: Int;
}

export interface BulletPromise extends Promise<Bullet>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  order: () => Promise<Int>;
  block: <T = BlockPromise>() => T;
}

export interface BulletSubscription
  extends Promise<AsyncIterator<Bullet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  block: <T = BlockSubscription>() => T;
}

export interface BulletNullablePromise
  extends Promise<Bullet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  order: () => Promise<Int>;
  block: <T = BlockPromise>() => T;
}

export interface BlockConnection {
  pageInfo: PageInfo;
  edges: BlockEdge[];
}

export interface BlockConnectionPromise
  extends Promise<BlockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlockEdge>>() => T;
  aggregate: <T = AggregateBlockPromise>() => T;
}

export interface BlockConnectionSubscription
  extends Promise<AsyncIterator<BlockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlockSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BlockEdge {
  node: Block;
  cursor: String;
}

export interface BlockEdgePromise extends Promise<BlockEdge>, Fragmentable {
  node: <T = BlockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlockEdgeSubscription
  extends Promise<AsyncIterator<BlockEdge>>,
    Fragmentable {
  node: <T = BlockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlock {
  count: Int;
}

export interface AggregateBlockPromise
  extends Promise<AggregateBlock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlockSubscription
  extends Promise<AsyncIterator<AggregateBlock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BulletConnection {
  pageInfo: PageInfo;
  edges: BulletEdge[];
}

export interface BulletConnectionPromise
  extends Promise<BulletConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BulletEdge>>() => T;
  aggregate: <T = AggregateBulletPromise>() => T;
}

export interface BulletConnectionSubscription
  extends Promise<AsyncIterator<BulletConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BulletEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBulletSubscription>() => T;
}

export interface BulletEdge {
  node: Bullet;
  cursor: String;
}

export interface BulletEdgePromise extends Promise<BulletEdge>, Fragmentable {
  node: <T = BulletPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BulletEdgeSubscription
  extends Promise<AsyncIterator<BulletEdge>>,
    Fragmentable {
  node: <T = BulletSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBullet {
  count: Int;
}

export interface AggregateBulletPromise
  extends Promise<AggregateBullet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBulletSubscription
  extends Promise<AsyncIterator<AggregateBullet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResumeConnection {
  pageInfo: PageInfo;
  edges: ResumeEdge[];
}

export interface ResumeConnectionPromise
  extends Promise<ResumeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResumeEdge>>() => T;
  aggregate: <T = AggregateResumePromise>() => T;
}

export interface ResumeConnectionSubscription
  extends Promise<AsyncIterator<ResumeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResumeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResumeSubscription>() => T;
}

export interface ResumeEdge {
  node: Resume;
  cursor: String;
}

export interface ResumeEdgePromise extends Promise<ResumeEdge>, Fragmentable {
  node: <T = ResumePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResumeEdgeSubscription
  extends Promise<AsyncIterator<ResumeEdge>>,
    Fragmentable {
  node: <T = ResumeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResume {
  count: Int;
}

export interface AggregateResumePromise
  extends Promise<AggregateResume>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResumeSubscription
  extends Promise<AsyncIterator<AggregateResume>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SectionConnection {
  pageInfo: PageInfo;
  edges: SectionEdge[];
}

export interface SectionConnectionPromise
  extends Promise<SectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SectionEdge>>() => T;
  aggregate: <T = AggregateSectionPromise>() => T;
}

export interface SectionConnectionSubscription
  extends Promise<AsyncIterator<SectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSectionSubscription>() => T;
}

export interface SectionEdge {
  node: Section;
  cursor: String;
}

export interface SectionEdgePromise extends Promise<SectionEdge>, Fragmentable {
  node: <T = SectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SectionEdgeSubscription
  extends Promise<AsyncIterator<SectionEdge>>,
    Fragmentable {
  node: <T = SectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSection {
  count: Int;
}

export interface AggregateSectionPromise
  extends Promise<AggregateSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectionSubscription
  extends Promise<AsyncIterator<AggregateSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BlockSubscriptionPayload {
  mutation: MutationType;
  node: Block;
  updatedFields: String[];
  previousValues: BlockPreviousValues;
}

export interface BlockSubscriptionPayloadPromise
  extends Promise<BlockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlockPreviousValuesPromise>() => T;
}

export interface BlockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlockPreviousValuesSubscription>() => T;
}

export interface BlockPreviousValues {
  id: ID_Output;
  title1: String;
  title2?: String;
  subtitle1?: String;
  subtitle2?: String;
  order: Int;
}

export interface BlockPreviousValuesPromise
  extends Promise<BlockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title1: () => Promise<String>;
  title2: () => Promise<String>;
  subtitle1: () => Promise<String>;
  subtitle2: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface BlockPreviousValuesSubscription
  extends Promise<AsyncIterator<BlockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title1: () => Promise<AsyncIterator<String>>;
  title2: () => Promise<AsyncIterator<String>>;
  subtitle1: () => Promise<AsyncIterator<String>>;
  subtitle2: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface BulletSubscriptionPayload {
  mutation: MutationType;
  node: Bullet;
  updatedFields: String[];
  previousValues: BulletPreviousValues;
}

export interface BulletSubscriptionPayloadPromise
  extends Promise<BulletSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BulletPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BulletPreviousValuesPromise>() => T;
}

export interface BulletSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BulletSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BulletSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BulletPreviousValuesSubscription>() => T;
}

export interface BulletPreviousValues {
  id: ID_Output;
  text: String;
  order: Int;
}

export interface BulletPreviousValuesPromise
  extends Promise<BulletPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface BulletPreviousValuesSubscription
  extends Promise<AsyncIterator<BulletPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface ResumeSubscriptionPayload {
  mutation: MutationType;
  node: Resume;
  updatedFields: String[];
  previousValues: ResumePreviousValues;
}

export interface ResumeSubscriptionPayloadPromise
  extends Promise<ResumeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResumePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResumePreviousValuesPromise>() => T;
}

export interface ResumeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResumeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResumeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResumePreviousValuesSubscription>() => T;
}

export interface ResumePreviousValues {
  id: ID_Output;
  user: String;
  title: String;
}

export interface ResumePreviousValuesPromise
  extends Promise<ResumePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: () => Promise<String>;
  title: () => Promise<String>;
}

export interface ResumePreviousValuesSubscription
  extends Promise<AsyncIterator<ResumePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface SectionSubscriptionPayload {
  mutation: MutationType;
  node: Section;
  updatedFields: String[];
  previousValues: SectionPreviousValues;
}

export interface SectionSubscriptionPayloadPromise
  extends Promise<SectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectionPreviousValuesPromise>() => T;
}

export interface SectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectionPreviousValuesSubscription>() => T;
}

export interface SectionPreviousValues {
  id: ID_Output;
  title: String;
  order: Int;
}

export interface SectionPreviousValuesPromise
  extends Promise<SectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface SectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Resume",
    embedded: false
  },
  {
    name: "Section",
    embedded: false
  },
  {
    name: "Block",
    embedded: false
  },
  {
    name: "Bullet",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
